// Losely based on https://www.sqlite.org/lang_expr.html
// Not trying to be compatible.

WHITESPACE = _{ " " | "\n" }

// Literals.
// https://www.sqlite.org/syntax/numeric-literal.html
integer_literal = @{ "-"? ~ ASCII_DIGIT+ }
decimal_literal = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
numeric_literal = _{ decimal_literal | integer_literal}
null_literal = @{ ^"NULL" }
true_literal = @{ ^"true" }
false_literal = @{ ^"false" }
bool_literal = _{ true_literal | false_literal }
// SQL uses single quotes for text and double quotes for fancy identifiers.
// SQLite supports non-standard use of double quotes for fancy column names, but regrets the decision.
// See: https://www.sqlite.org/quirks.html#double_quoted_string_literals_are_accepted
// We will keep to the SQL standard here.
single_quoted_string = @{ "'" ~ ( "''" | (!"'" ~ ANY) )* ~ "'" }
double_quoted_string = @{ "\"" ~ ( "\"\"" | (!"'\"" ~ ANY) )* ~ "'\"" }
literal = _{ numeric_literal | null_literal | bool_literal | single_quoted_string  }
table_identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
// TODO: allow qualification with table name or alias.
// TODO: allow double quoted strings as column names.
column_name = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// Arithmetic and logical expressions.
// No whitespace allowed between digits

atom = _{ literal }
bin_op = _{ add | subtract | multiply | divide }
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }

// atom and bin_op  rules will be the input to the PrattParser. It expects to receive atoms separated by operators.
comma = _{ "," }
expr = { atom ~ (bin_op ~ atom)* }
expr_list = { "(" ~ expr ~ ( comma ~ expr )*  ~ ")" }
expr_list_list = { expr_list  ~ ( comma ~ expr_list )* }

// Reused bits in SQL statements.
column_def = {column_name ~ type_name}
column_defs = { column_def ~ ("," ~ column_def)* }


// Create Statement
// https://www.sqlite.org/syntax/create-table-stmt.html
create = _{ ^"create" }
table = _{ ^"table" }
int = { ^"integer"  | ^"int"}
real = { ^"real" }
text = { ^"string" | ^"text" }
type_name = {int | text | real}
create_stmt = {SOI ~ create ~ table ~ table_identifier ~ "(" ~ column_defs ~ ")" ~ EOI}

// Insert Statement
// https://www.sqlite.org/syntax/insert-stmt.html
insert = _{ ^"insert" }
into = _{ ^"into" }
values = _{^"values"}
insert_stmt = {SOI ~ insert ~ into ~ table_identifier ~ values ~ expr_list_list ~ EOI}

// Select Statement.
// https://www.sqlite.org/syntax/select-stmt.html
select = _{ ^"select" }
star = { "*" }
from = _{ ^"from" }
select_item = { expr | column_name | star  }   // TODO: support expressions on columns in select
select_items = { select_item ~ ("," ~ select_item)* }
from_items = {from ~ table_identifier}
select_stmt = {SOI ~ select ~ select_items ~ (from ~ table_identifier)? ~ EOI}
